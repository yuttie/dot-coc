snippet module "module declaration" b
module ${1:`!v expand("%:t:r")`} ${2:(${3}) }where
${0}
endsnippet


snippet import "import" b
import ${1}${2: (${3})}
endsnippet


snippet import_qualified "import qualified" b
import qualified ${1} as ${2}
endsnippet


snippet decl "func :: type; func pat = exp"
${1} :: ${2}
$1 ${3} = ${4}
endsnippet


snippet let "let in"
let ${1}
in  ${2}
endsnippet


snippet if "if then else"
if ${1}
    then ${2}
    else ${3}
endsnippet


snippet case_maybe "case maybe of"
case ${1} of
    Nothing -> ${2}
    Just ${3} -> ${4}
endsnippet


snippet case_either "case either of"
case ${1} of
    Left  ${2} -> ${3}
    Right ${4} -> ${5}
endsnippet
